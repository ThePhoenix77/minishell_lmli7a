//EXIT CASES:
    1.  Script Completion: Reaches the end of instructions.
    2.  Explicit Exit Command: exit is called.
    3.  Error in Command: With set -e, any command failure.
    4.  Uncaught Signal: Receives a signal like SIGINT or SIGTERM.
    5.  Exit in a Subshell: Subshell error with set -e.
    6.  Syntax Errors: Prevents further execution.
    7.  return in Non-Function Context: Causes exit.
    8.  Exit in Traps: exit or kill in a trap.
    9.  User-Initiated Exit: Manual interrupt (e.g., Ctrl+C).
    10. Resource Limits Exceeded: Exceeds system limits.
    11. End-of-File on Input: Unexpected EOF when reading.
    12. Using exec: Replaces the current shell process.


//PARSING:
    1. Commands (simple and compound)
        Quoting ('...', "...", \)
        Comments (#)
        Variables and expansions ($VAR, ${VAR}, $(...), $((...)))
    2. Control Structures:

        Conditionals (if, then, else, elif, fi, case, esac)
        Loops (for, while, until, do, done)
        Functions (declaration and invocation)
    3. I/O Redirection:

        Input/Output redirection (<, >, >>, 2>, 2>>, &>, <<, <<<)
        Pipes (|, |&)
    4. Operators:

        Logical operators (&&, ||)
        Background execution (&, wait)
        Subshells ((...))
    5. Special Characters/Expansions:

        Globbing (*, ?, [...])
        Braces expansion ({a,b}, {1..10})
        Tilde expansion (~, ~user)
        Parameter expansion (${#VAR}, ${VAR:-default}, ${VAR:+value}, ${VAR=value}, ${VAR?error})
    6. Error Handling:

        set -e, set -u, set -o pipefail
        Signals and traps (trap 'commands' SIGNAL)
    7. Miscellaneous:

        Aliases (alias name='command')
        Arrays (arr=(1 2 3), ${arr[0]})
        Sourcing files (source file, . file)
        Special parameters ($?, $0, $#, $@, $*, $!, $$)
        Exit and return (exit [n], return [n])
    8. Advanced Parsing:

        Extended globbing (@(pattern|pattern), !(pattern), etc.)
        Process substitution (<(command), >(command))
        Coprocesses (coproc NAME { command; })